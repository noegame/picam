#!/bin/bash
# Script d'installation et configuration PiCam

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_header() {
    echo -e "${BLUE}"
    echo "================================================"
    echo "üé• Installation PiCam - Scripts Shell"
    echo "================================================"
    echo -e "${NC}"
}

print_step() {
    echo -e "${BLUE}[√âTAPE]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[OK]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[ATTENTION]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERREUR]${NC} $1"
}

# V√©rifier si on est sur Raspberry Pi
check_raspberry_pi() {
    print_step "V√©rification du syst√®me..."
    
    if [ -f /proc/device-tree/model ]; then
        model=$(cat /proc/device-tree/model)
        if [[ $model == *"Raspberry Pi"* ]]; then
            print_success "Syst√®me d√©tect√©: $model"
            return 0
        fi
    fi
    
    print_warning "Syst√®me non-Raspberry Pi d√©tect√©"
    return 1
}

# V√©rifier et activer la cam√©ra
setup_camera() {
    print_step "Configuration de la cam√©ra..."
    
    # V√©rifier si la cam√©ra est activ√©e
    if ! grep -q "^camera_auto_detect=1" /boot/config.txt 2>/dev/null; then
        print_warning "La cam√©ra pourrait ne pas √™tre activ√©e"
        echo "Pour l'activer manuellement:"
        echo "  sudo raspi-config"
        echo "  -> Interface Options -> Camera -> Enable"
    else
        print_success "Cam√©ra activ√©e dans /boot/config.txt"
    fi
}

# Installer les d√©pendances
install_dependencies() {
    print_step "Installation des d√©pendances..."
    
    # Mettre √† jour les paquets
    sudo apt update
    
    # Identifier la version de Raspberry Pi OS
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        print_success "OS d√©tect√©: $PRETTY_NAME"
        
        # Raspberry Pi OS Bookworm (recommand√©)
        if [[ $VERSION_CODENAME == "bookworm" ]]; then
            print_step "Installation de libcamera-apps (Bookworm)..."
            sudo apt install -y libcamera-apps
            
        # Raspberry Pi OS Bullseye (legacy)
        elif [[ $VERSION_CODENAME == "bullseye" ]]; then
            print_step "Installation des outils legacy (Bullseye)..."
            sudo apt install -y raspberrypi-kernel-headers
            
        else
            print_warning "Version OS non reconnue, installation des deux..."
            sudo apt install -y libcamera-apps raspberrypi-kernel-headers
        fi
    fi
    
    # Installer fswebcam comme fallback
    print_step "Installation de fswebcam (fallback)..."
    sudo apt install -y fswebcam
    
    print_success "D√©pendances install√©es"
}

# Configurer les permissions
setup_permissions() {
    print_step "Configuration des permissions..."
    
    # Ajouter l'utilisateur au groupe video
    sudo usermod -a -G video $USER
    
    # Rendre les scripts ex√©cutables
    chmod +x capture_images.sh
    chmod +x simple_capture.sh
    chmod +x start_picam.sh
    
    print_success "Permissions configur√©es"
    print_warning "Red√©marrez votre session pour que les permissions prennent effet"
}

# Tester la cam√©ra
test_camera() {
    print_step "Test de la cam√©ra..."
    
    mkdir -p test_data
    
    # Tester libcamera-still
    if command -v libcamera-still &> /dev/null; then
        print_step "Test avec libcamera-still..."
        if libcamera-still --width 640 --height 480 --output test_data/test_libcamera.jpg --timeout 1000 --nopreview; then
            print_success "Test libcamera-still r√©ussi!"
            rm -f test_data/test_libcamera.jpg
        else
            print_error "√âchec du test libcamera-still"
        fi
    fi
    
    # Tester raspistill
    if command -v raspistill &> /dev/null; then
        print_step "Test avec raspistill..."
        if raspistill -w 640 -h 480 -o test_data/test_raspistill.jpg -t 1000 -n; then
            print_success "Test raspistill r√©ussi!"
            rm -f test_data/test_raspistill.jpg
        else
            print_error "√âchec du test raspistill"
        fi
    fi
    
    rmdir test_data 2>/dev/null
}

# Afficher les instructions d'utilisation
show_usage() {
    echo
    print_step "Instructions d'utilisation:"
    echo
    echo "üìã Scripts disponibles:"
    echo "  ‚Ä¢ ./capture_images.sh    - Script complet avec options"
    echo "  ‚Ä¢ ./simple_capture.sh    - Script simple et rapide"
    echo "  ‚Ä¢ ./start_picam.sh       - Lance le programme Python"
    echo
    echo "üöÄ Exemples d'utilisation:"
    echo "  ./simple_capture.sh                    # Capture simple toutes les 5s"
    echo "  ./capture_images.sh                    # Capture avec logs"
    echo "  ./capture_images.sh -i 10              # Toutes les 10 secondes"
    echo "  ./capture_images.sh -d photos -i 15    # Dans dossier 'photos/'"
    echo "  ./capture_images.sh -s                 # Voir les statistiques"
    echo
    echo "‚ö†Ô∏è  Pour arr√™ter: Ctrl+C"
    echo
}

# Menu principal
main_menu() {
    print_header
    
    echo "Choisissez une option:"
    echo "1) Installation compl√®te (recommand√©)"
    echo "2) V√©rifier le syst√®me seulement"
    echo "3) Installer les d√©pendances seulement"
    echo "4) Tester la cam√©ra"
    echo "5) Afficher les instructions"
    echo "6) Quitter"
    echo
    read -p "Votre choix [1-6]: " choice
    
    case $choice in
        1)
            check_raspberry_pi
            setup_camera
            install_dependencies
            setup_permissions
            test_camera
            show_usage
            ;;
        2)
            check_raspberry_pi
            setup_camera
            ;;
        3)
            install_dependencies
            ;;
        4)
            test_camera
            ;;
        5)
            show_usage
            ;;
        6)
            echo "Au revoir!"
            exit 0
            ;;
        *)
            print_error "Option invalide"
            main_menu
            ;;
    esac
}

# Lancer le menu si aucun argument
if [ $# -eq 0 ]; then
    main_menu
else
    # Installation automatique si argument --auto
    if [ "$1" = "--auto" ]; then
        print_header
        check_raspberry_pi
        setup_camera
        install_dependencies
        setup_permissions
        show_usage
    else
        echo "Usage: $0 [--auto]"
        echo "  --auto    Installation automatique"
        echo "  (sans arg) Menu interactif"
    fi
fi