# stream_pi_to_vlc.py
from picamera2 import Picamera2
import socket
import cv2
import numpy as np
import time

# ------------------------
# Configuration cam√©ra
# ------------------------
print("üé• Initialisation de la cam√©ra...")
picam2 = Picamera2()

# V√©rifier les cam√©ras disponibles
cameras = Picamera2.global_camera_info()
print(f"üì∑ Cam√©ras d√©tect√©es: {len(cameras)}")
if not cameras:
    print("‚ùå Aucune cam√©ra trouv√©e!")
    exit(1)

picam2.configure(picam2.create_preview_configuration(main={"size": (640, 480), "format": "RGB888"}))
picam2.start()
print("‚úÖ Cam√©ra initialis√©e")

# Attendre stabilisation
time.sleep(2)

# ------------------------
# Cr√©ation serveur TCP
# ------------------------
HOST = ''    # toutes interfaces
PORT = 8554  # port pour VLC

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((HOST, PORT))
s.listen(1)
print(f"En attente de connexion sur port {PORT}...")
conn, addr = s.accept()
print("Connect√© √†", addr)

try:
    frame_count = 0
    while True:
        # Capture frame
        frame = picam2.capture_array()
        
        # Convertir RGB vers BGR pour OpenCV
        frame_bgr = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
        
        # Encode en JPEG pour transmission
        _, jpeg = cv2.imencode('.jpg', frame_bgr, [cv2.IMWRITE_JPEG_QUALITY, 80])
        data = jpeg.tobytes()
        
        # Envoi taille (4 octets) + donn√©es
        try:
            conn.send(len(data).to_bytes(4, 'big') + data)
            frame_count += 1
            if frame_count % 30 == 0:  # Afficher toutes les 30 frames
                print(f"üì∫ {frame_count} frames envoy√©es")
        except BrokenPipeError:
            print("‚ùå Connexion ferm√©e par le client")
            break
            
        # Limiter le framerate √† ~30 FPS
        time.sleep(1/30)

except KeyboardInterrupt:
    print("\nFermeture du serveur...")

finally:
    print("üîÑ Nettoyage...")
    try:
        conn.close()
    except:
        pass
    try:
        picam2.stop()
    except:
        pass
    print("‚úÖ Arr√™t complet")
